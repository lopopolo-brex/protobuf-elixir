defmodule Ext.TrafficLightColor do
  @moduledoc false
  use Protobuf, custom_field_options?: true, enum: true, syntax: :proto3

  @type t ::
          integer
          | :TRAFFIC_LIGHT_COLOR_INVALID
          | :TRAFFIC_LIGHT_COLOR_UNSET
          | :TRAFFIC_LIGHT_COLOR_GREEN
          | :TRAFFIC_LIGHT_COLOR_YELLOW
          | :TRAFFIC_LIGHT_COLOR_RED
  def descriptor do
    # credo:disable-for-next-line
    Elixir.Google.Protobuf.EnumDescriptorProto.decode(
      <<10, 17, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114,
        18, 31, 10, 27, 84, 82, 65, 70, 70, 73, 67, 95, 76, 73, 71, 72, 84, 95, 67, 79, 76, 79,
        82, 95, 73, 78, 86, 65, 76, 73, 68, 16, 0, 18, 29, 10, 25, 84, 82, 65, 70, 70, 73, 67, 95,
        76, 73, 71, 72, 84, 95, 67, 79, 76, 79, 82, 95, 85, 78, 83, 69, 84, 16, 1, 18, 29, 10, 25,
        84, 82, 65, 70, 70, 73, 67, 95, 76, 73, 71, 72, 84, 95, 67, 79, 76, 79, 82, 95, 71, 82,
        69, 69, 78, 16, 2, 18, 30, 10, 26, 84, 82, 65, 70, 70, 73, 67, 95, 76, 73, 71, 72, 84, 95,
        67, 79, 76, 79, 82, 95, 89, 69, 76, 76, 79, 87, 16, 3, 18, 27, 10, 23, 84, 82, 65, 70, 70,
        73, 67, 95, 76, 73, 71, 72, 84, 95, 67, 79, 76, 79, 82, 95, 82, 69, 68, 16, 4>>
    )
  end

  field :TRAFFIC_LIGHT_COLOR_INVALID, 0
  field :TRAFFIC_LIGHT_COLOR_UNSET, 1
  field :TRAFFIC_LIGHT_COLOR_GREEN, 2
  field :TRAFFIC_LIGHT_COLOR_YELLOW, 3
  field :TRAFFIC_LIGHT_COLOR_RED, 4
end

defmodule Ext.Nested do
  @moduledoc false
  use Protobuf, custom_field_options?: true, syntax: :proto3

  @type t :: %__MODULE__{
          my_timestamp: {atom, any}
        }
  defstruct [:my_timestamp]

  def descriptor do
    # credo:disable-for-next-line
    Elixir.Google.Protobuf.DescriptorProto.decode(
      <<10, 6, 78, 101, 115, 116, 101, 100, 18, 68, 10, 2, 100, 116, 24, 1, 32, 1, 40, 11, 50, 26,
        46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 84, 105,
        109, 101, 115, 116, 97, 109, 112, 66, 22, 24, 0, 40, 0, 80, 0, 250, 222, 31, 12, 10, 10,
        68, 97, 116, 101, 84, 105, 109, 101, 46, 116, 72, 0, 82, 2, 100, 116, 18, 75, 10, 3, 110,
        100, 116, 24, 2, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114,
        111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 66, 27, 24, 0,
        40, 0, 80, 0, 250, 222, 31, 17, 10, 15, 78, 97, 105, 118, 101, 68, 97, 116, 101, 84, 105,
        109, 101, 46, 116, 72, 0, 82, 3, 110, 100, 116, 66, 14, 10, 12, 109, 121, 95, 116, 105,
        109, 101, 115, 116, 97, 109, 112, 90, 10, 101, 120, 116, 46, 78, 101, 115, 116, 101, 100>>
    )
  end

  oneof :my_timestamp, 0

  field :dt, 1, type: Google.Protobuf.Timestamp, oneof: 0, options: [extype: "DateTime.t"]
  field :ndt, 2, type: Google.Protobuf.Timestamp, oneof: 0, options: [extype: "NaiveDateTime.t"]
end

defmodule Ext.MyMessage do
  @moduledoc false
  use Protobuf, custom_field_options?: true, syntax: :proto3

  @type t :: %__MODULE__{
          enums_oneof: {atom, any},
          f1: float | nil,
          f2: float | nil,
          f3: integer | nil,
          f4: non_neg_integer | nil,
          f5: integer | nil,
          f6: non_neg_integer | nil,
          f7: boolean | nil,
          f8: String.t() | nil,
          f9: String.t() | nil,
          no_extype: Google.Protobuf.StringValue.t() | nil,
          repeated_field: [String.t()],
          normal1: non_neg_integer,
          normal2: String.t(),
          nested: Ext.Nested.t() | nil,
          color: Ext.TrafficLightColor.t(),
          color_lc: Ext.TrafficLightColor.t(),
          color_depr: Ext.TrafficLightColor.t(),
          color_atom: Ext.TrafficLightColor.t()
        }
  defstruct [
    :enums_oneof,
    :f1,
    :f2,
    :f3,
    :f4,
    :f5,
    :f6,
    :f7,
    :f8,
    :f9,
    :no_extype,
    :repeated_field,
    :normal1,
    :normal2,
    :nested,
    :color,
    :color_lc,
    :color_depr,
    :color_atom
  ]

  def descriptor do
    # credo:disable-for-next-line
    Elixir.Google.Protobuf.DescriptorProto.decode(
      <<10, 9, 77, 121, 77, 101, 115, 115, 97, 103, 101, 18, 63, 10, 2, 102, 49, 24, 1, 32, 1, 40,
        11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102,
        46, 68, 111, 117, 98, 108, 101, 86, 97, 108, 117, 101, 66, 17, 24, 0, 40, 0, 80, 0, 250,
        222, 31, 7, 10, 5, 102, 108, 111, 97, 116, 82, 2, 102, 49, 18, 62, 10, 2, 102, 50, 24, 2,
        32, 1, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98,
        117, 102, 46, 70, 108, 111, 97, 116, 86, 97, 108, 117, 101, 66, 17, 24, 0, 40, 0, 80, 0,
        250, 222, 31, 7, 10, 5, 102, 108, 111, 97, 116, 82, 2, 102, 50, 18, 64, 10, 2, 102, 51,
        24, 3, 32, 1, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
        111, 98, 117, 102, 46, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 66, 19, 24, 0, 40, 0,
        80, 0, 250, 222, 31, 9, 10, 7, 105, 110, 116, 101, 103, 101, 114, 82, 2, 102, 51, 18, 73,
        10, 2, 102, 52, 24, 4, 32, 1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112,
        114, 111, 116, 111, 98, 117, 102, 46, 85, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 66,
        27, 24, 0, 40, 0, 80, 0, 250, 222, 31, 17, 10, 15, 110, 111, 110, 95, 110, 101, 103, 95,
        105, 110, 116, 101, 103, 101, 114, 82, 2, 102, 52, 18, 64, 10, 2, 102, 53, 24, 5, 32, 1,
        40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
        102, 46, 73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 66, 19, 24, 0, 40, 0, 80, 0, 250,
        222, 31, 9, 10, 7, 105, 110, 116, 101, 103, 101, 114, 82, 2, 102, 53, 18, 73, 10, 2, 102,
        54, 24, 6, 32, 1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
        116, 111, 98, 117, 102, 46, 85, 73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 66, 27, 24,
        0, 40, 0, 80, 0, 250, 222, 31, 17, 10, 15, 110, 111, 110, 95, 110, 101, 103, 95, 105, 110,
        116, 101, 103, 101, 114, 82, 2, 102, 54, 18, 63, 10, 2, 102, 55, 24, 7, 32, 1, 40, 11, 50,
        26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 66,
        111, 111, 108, 86, 97, 108, 117, 101, 66, 19, 24, 0, 40, 0, 80, 0, 250, 222, 31, 9, 10, 7,
        98, 111, 111, 108, 101, 97, 110, 82, 2, 102, 55, 18, 66, 10, 2, 102, 56, 24, 8, 32, 1, 40,
        11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102,
        46, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 66, 20, 24, 0, 40, 0, 80, 0, 250,
        222, 31, 10, 10, 8, 83, 116, 114, 105, 110, 103, 46, 116, 82, 2, 102, 56, 18, 67, 10, 2,
        102, 57, 24, 9, 32, 1, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114,
        111, 116, 111, 98, 117, 102, 46, 66, 121, 116, 101, 115, 86, 97, 108, 117, 101, 66, 22,
        24, 0, 40, 0, 80, 0, 250, 222, 31, 12, 10, 10, 83, 116, 114, 105, 110, 103, 46, 116, 40,
        41, 82, 2, 102, 57, 18, 57, 10, 9, 110, 111, 95, 101, 120, 116, 121, 112, 101, 24, 10, 32,
        1, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
        102, 46, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 82, 8, 110, 111, 69, 120,
        116, 121, 112, 101, 18, 89, 10, 14, 114, 101, 112, 101, 97, 116, 101, 100, 95, 102, 105,
        101, 108, 100, 24, 11, 32, 3, 40, 11, 50, 28, 46, 103, 111, 111, 103, 108, 101, 46, 112,
        114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101,
        66, 20, 24, 0, 40, 0, 80, 0, 250, 222, 31, 10, 10, 8, 83, 116, 114, 105, 110, 103, 46,
        116, 82, 13, 114, 101, 112, 101, 97, 116, 101, 100, 70, 105, 101, 108, 100, 18, 24, 10, 7,
        110, 111, 114, 109, 97, 108, 49, 24, 12, 32, 1, 40, 4, 82, 7, 110, 111, 114, 109, 97, 108,
        49, 18, 24, 10, 7, 110, 111, 114, 109, 97, 108, 50, 24, 13, 32, 1, 40, 9, 82, 7, 110, 111,
        114, 109, 97, 108, 50, 18, 35, 10, 6, 110, 101, 115, 116, 101, 100, 24, 14, 32, 1, 40, 11,
        50, 11, 46, 101, 120, 116, 46, 78, 101, 115, 116, 101, 100, 82, 6, 110, 101, 115, 116,
        101, 100, 18, 44, 10, 5, 99, 111, 108, 111, 114, 24, 15, 32, 1, 40, 14, 50, 22, 46, 101,
        120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 111, 108, 111,
        114, 82, 5, 99, 111, 108, 111, 114, 18, 72, 10, 8, 99, 111, 108, 111, 114, 95, 108, 99,
        24, 16, 32, 1, 40, 14, 50, 22, 46, 101, 120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76,
        105, 103, 104, 116, 67, 111, 108, 111, 114, 66, 21, 24, 0, 40, 0, 80, 0, 250, 222, 31, 11,
        18, 9, 108, 111, 119, 101, 114, 99, 97, 115, 101, 82, 7, 99, 111, 108, 111, 114, 76, 99,
        18, 75, 10, 10, 99, 111, 108, 111, 114, 95, 100, 101, 112, 114, 24, 17, 32, 1, 40, 14, 50,
        22, 46, 101, 120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67,
        111, 108, 111, 114, 66, 20, 24, 0, 40, 0, 80, 0, 250, 222, 31, 10, 18, 8, 100, 101, 112,
        114, 101, 102, 105, 120, 82, 9, 99, 111, 108, 111, 114, 68, 101, 112, 114, 18, 74, 10, 10,
        99, 111, 108, 111, 114, 95, 97, 116, 111, 109, 24, 18, 32, 1, 40, 14, 50, 22, 46, 101,
        120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 111, 108, 111,
        114, 66, 19, 24, 0, 40, 0, 80, 0, 250, 222, 31, 9, 18, 7, 97, 116, 111, 109, 105, 122,
        101, 82, 9, 99, 111, 108, 111, 114, 65, 116, 111, 109, 18, 82, 10, 14, 99, 111, 108, 111,
        114, 95, 114, 101, 112, 101, 97, 116, 101, 100, 24, 19, 32, 3, 40, 14, 50, 22, 46, 101,
        120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 111, 108, 111,
        114, 66, 19, 24, 0, 40, 0, 80, 0, 250, 222, 31, 9, 18, 7, 97, 116, 111, 109, 105, 122,
        101, 82, 13, 99, 111, 108, 111, 114, 82, 101, 112, 101, 97, 116, 101, 100, 18, 74, 10, 21,
        99, 111, 108, 111, 114, 95, 114, 101, 112, 101, 97, 116, 101, 100, 95, 110, 111, 114, 109,
        97, 108, 24, 20, 32, 3, 40, 14, 50, 22, 46, 101, 120, 116, 46, 84, 114, 97, 102, 102, 105,
        99, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 82, 19, 99, 111, 108, 111, 114, 82,
        101, 112, 101, 97, 116, 101, 100, 78, 111, 114, 109, 97, 108, 18, 24, 10, 7, 110, 111,
        114, 109, 97, 108, 51, 24, 21, 32, 3, 40, 9, 82, 7, 110, 111, 114, 109, 97, 108, 51, 18,
        57, 10, 11, 99, 111, 108, 111, 114, 95, 111, 110, 101, 111, 102, 24, 22, 32, 1, 40, 14,
        50, 22, 46, 101, 120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67,
        111, 108, 111, 114, 72, 0, 82, 10, 99, 111, 108, 111, 114, 79, 110, 101, 111, 102, 18, 87,
        10, 16, 99, 111, 108, 111, 114, 95, 111, 110, 101, 111, 102, 95, 97, 116, 111, 109, 24,
        23, 32, 1, 40, 14, 50, 22, 46, 101, 120, 116, 46, 84, 114, 97, 102, 102, 105, 99, 76, 105,
        103, 104, 116, 67, 111, 108, 111, 114, 66, 19, 24, 0, 40, 0, 80, 0, 250, 222, 31, 9, 18,
        7, 97, 116, 111, 109, 105, 122, 101, 72, 0, 82, 14, 99, 111, 108, 111, 114, 79, 110, 101,
        111, 102, 65, 116, 111, 109, 66, 13, 10, 11, 101, 110, 117, 109, 115, 95, 111, 110, 101,
        111, 102, 90, 13, 101, 120, 116, 46, 77, 121, 77, 101, 115, 115, 97, 103, 101>>
    )
  end

  oneof :enums_oneof, 0

  field :f1, 1, type: Google.Protobuf.DoubleValue, options: [extype: "float"]
  field :f2, 2, type: Google.Protobuf.FloatValue, options: [extype: "float"]
  field :f3, 3, type: Google.Protobuf.Int64Value, options: [extype: "integer"]
  field :f4, 4, type: Google.Protobuf.UInt64Value, options: [extype: "non_neg_integer"]
  field :f5, 5, type: Google.Protobuf.Int32Value, options: [extype: "integer"]
  field :f6, 6, type: Google.Protobuf.UInt32Value, options: [extype: "non_neg_integer"]
  field :f7, 7, type: Google.Protobuf.BoolValue, options: [extype: "boolean"]
  field :f8, 8, type: Google.Protobuf.StringValue, options: [extype: "String.t"]
  field :f9, 9, type: Google.Protobuf.BytesValue, options: [extype: "String.t()"]
  field :no_extype, 10, type: Google.Protobuf.StringValue, json_name: "noExtype"

  field :repeated_field, 11,
    repeated: true,
    type: Google.Protobuf.StringValue,
    json_name: "repeatedField",
    options: [extype: "String.t"]

  field :normal1, 12, type: :uint64
  field :normal2, 13, type: :string
  field :nested, 14, type: Ext.Nested
  field :color, 15, type: Ext.TrafficLightColor, enum: true

  field :color_lc, 16,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorLc",
    options: [enum: "lowercase"]

  field :color_depr, 17,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorDepr",
    options: [enum: "deprefix"]

  field :color_atom, 18,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorAtom",
    options: [enum: "atomize"]

  field :color_repeated, 19,
    repeated: true,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorRepeated",
    options: [enum: "atomize"]

  field :color_repeated_normal, 20,
    repeated: true,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorRepeatedNormal"

  field :normal3, 21, repeated: true, type: :string

  field :color_oneof, 22,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorOneof",
    oneof: 0

  field :color_oneof_atom, 23,
    type: Ext.TrafficLightColor,
    enum: true,
    json_name: "colorOneofAtom",
    oneof: 0,
    options: [enum: "atomize"]
end
